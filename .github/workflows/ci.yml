name: CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

# 环境变量
env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: 代码格式检查 (Black)
      run: black --check --diff .
    
    - name: 导入排序检查 (isort)
      run: isort --check-only --diff .
    
    - name: 代码风格检查 (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 类型检查 (MyPy)
      run: mypy . --ignore-missing-imports || true

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    name: 单元测试
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-html pytest-xdist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: 运行单元测试
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --html=reports/unit-test-report.html --self-contained-html
    
    - name: 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-reports-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
          coverage.xml
    
    - name: 上传覆盖率到Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # API测试
  api-tests:
    runs-on: ubuntu-latest
    name: API自动化测试
    needs: unit-tests
    
    services:
      # 如果需要数据库服务
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # API测试依赖已包含在主requirements.txt中
        # pip install -r tests/automation/api/requirements.txt
    
    - name: 启动应用程序
      run: |
        cd app
        python app.py &
        sleep 10
      env:
        FLASK_ENV: testing
    
    - name: 运行API测试
      run: |
        # 注意：当前API测试目录为空，需要先创建API测试文件
        # pytest tests/automation/api/ -v --html=reports/api-test-report.html --self-contained-html
        echo "API测试目录为空，跳过API测试"
    
    - name: 上传API测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-reports
        path: reports/

  # UI测试
  ui-tests:
    runs-on: ubuntu-latest
    name: UI自动化测试
    needs: unit-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium webdriver-manager pytest-html
    
    - name: 启动应用程序
      run: |
        cd app
        python app.py &
        sleep 10
      env:
        FLASK_ENV: testing
    
    - name: 运行UI测试
      run: |
        pytest tests/ui/ -v --html=reports/ui-test-report.html --self-contained-html
      env:
        HEADLESS: true
    
    - name: 上传UI测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-reports
        path: |
          reports/
          screenshots/

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    name: 性能测试
    needs: [api-tests, ui-tests]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/performance/requirements.txt
    
    - name: 启动应用程序
      run: |
        cd app
        python app.py &
        sleep 10
      env:
        FLASK_ENV: testing
    
    - name: 运行性能测试
      run: |
        python tests/performance/run_performance_tests.py --quick
    
    - name: 上传性能测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-reports
        path: tests/performance/reports/

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: 安全扫描
    needs: code-quality
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装安全扫描工具
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: 运行Bandit安全扫描
      run: |
        bandit -r . -f json -o reports/bandit-report.json || true
        bandit -r . -f txt
    
    - name: 检查依赖安全性
      run: |
        safety check --json --output reports/safety-report.json || true
        safety check
    
    - name: 上传安全扫描报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: reports/

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    name: 部署到测试环境
    needs: [api-tests, ui-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里添加实际的部署脚本
        # 例如: docker build, docker push, kubectl apply 等
    
    - name: 运行冒烟测试
      run: |
        echo "运行冒烟测试..."
        # 这里添加冒烟测试脚本

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    name: 部署到生产环境
    needs: [api-tests, ui-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://example.com
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本
    
    - name: 运行生产环境验证
      run: |
        echo "验证生产环境..."
        # 这里添加生产环境验证脚本

  # 生成测试报告汇总
  test-report-summary:
    runs-on: ubuntu-latest
    name: 测试报告汇总
    needs: [unit-tests, api-tests, ui-tests, performance-tests, security-scan]
    if: always()
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 下载所有测试报告
      uses: actions/download-artifact@v3
    
    - name: 生成测试报告汇总
      run: |
        echo "# 测试报告汇总" > test-summary.md
        echo "" >> test-summary.md
        echo "## 测试执行时间: $(date)" >> test-summary.md
        echo "" >> test-summary.md
        echo "## 测试结果概览" >> test-summary.md
        echo "" >> test-summary.md
        
        # 这里可以添加脚本来解析各种测试报告并生成汇总
        
        echo "### 单元测试" >> test-summary.md
        echo "- 状态: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### API测试" >> test-summary.md
        echo "- 状态: ${{ needs.api-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### UI测试" >> test-summary.md
        echo "- 状态: ${{ needs.ui-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### 性能测试" >> test-summary.md
        echo "- 状态: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### 安全扫描" >> test-summary.md
        echo "- 状态: ${{ needs.security-scan.result }}" >> test-summary.md
        echo "" >> test-summary.md
    
    - name: 上传测试报告汇总
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
    
    - name: 发送通知
      if: failure()
      run: |
        echo "测试失败，发送通知..."
        # 这里可以添加发送邮件、Slack通知等脚本